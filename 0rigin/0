#!/bin/bash

# this scripts tests that specified command (..ARGV) loads specified functions
# function names are taken from $LOAD environment var (as colon list string)

# usage: LOAD=function,names,here $0 ...ARGV
# example: LOAD=something $0 source something.bash

# it has no dependencies because everything is nothing at 0rigins

# run all tests -aka. main()- when no arguments were provided
if test $# -eq 0
then
  # sourcing autotest should load the following functions
  # TODO and should NOT load 0rigin functions
  LOAD=autotest,Error,EUSAGE,ENOENT \
    $0 source autotest

  # sourcing autotest 0rigin should load the following functions
  # TODO and should not load CASE()
  LOAD=FAIL,CODE,DIAG,DUMP,MAIN,UNIT,TEST,HELP,main,only,unit \
    $0 source autotest 0rigin

  exit 0
fi

# begin TEST logic -aka. unit()- when arguments were provided
echo TEST "LOAD=$LOAD" "$0$(printf ' %q' "$@")"
echo DESC '$@' as "'$@'"

# only builtins or functions are able to load functions
# TODO alias?
case "$(type -t "$1")" in
  function|builtin)
    echo PASS "\$1 has function or builtin type"
    ;;
  *)
    echo FAIL "\$1 should have either function or builtin type"
    echo CODE 1
    exit 1
esac

# it should run in less than [T] seconds
timeout=".05s" #TODO ${TIMEOUT:-.5s}
timeout --verbose $timeout bash -c "$*" || {
  code=$?
  echo FAIL "\$@ should run in less than $timeout seconds"
  echo CODE $code
  exit $code
}
echo PASS "\$@ runs in less than $timeout seconds"

# running the command should result on no output and status code 0
echo DESC '$output' as "\$(\$@ 2>&1)"
output="$("$@" 2>&1)"
status=$?
echo DESC '$status' as "\$?"
test -z "$output" || {
  echo FAIL "\$output should have no data"
  while read line; do echo "&> $line <"; done <<<"$output" >&2
  echo CODE 1
  exit 1
}
echo PASS "\$output has no data"
test "$status" -eq 0 || {
  echo FAIL "\$status should be 0, but is $status"
  echo CODE 1
  exit 1
}
echo PASS "\$status is $1"
unset -v output status

# after running the command $LOAD functions should be defined
echo DESC '$LOAD' as "$LOAD"
(
  "$@"
  echo VERB after running \$@ at shell lvl $BASH_SUBSHELL
  for name in ${LOAD//,/ }; do
    type="$(type -t "$name")"
    test "$type" = 'function' || {
      echo FAIL "'$name' should have function type, but has ${type:-no} type"
      echo CODE 1
      exit 1
    }
    echo PASS "'$name' has function type"
    unset -v type
  done
) || exit

echo CODE 0

##
# vim modeline (see vim +'help modeline')
# /* vim: set expandtab: */
# /* vim: set filetype=sh ts=2 shiftwidth=2: */

#!/bin/bash

function autotest--root () {
  # outputs the autotest root directory
  declare -r AUTOTEST_ROOT="$(dirname "$(readlink -f "$BASH_SOURCE")")"
  autotest--root () { echo "$AUTOTEST_ROOT"; }
  autotest--root
}

if test "$0" = "$BASH_SOURCE"
then # assume autotest is being executed

  # backwards compat:
  # "bare" call outputs all autotest old-api source code to stdout
  ! (( $# )) && {
    find "$(autotest--root)/old-api" -name "*.bash" -type f -exec cat '{}' +
    exit $?
  }
  # some subcomands don't need more source code too
  case "$1" in
    root) autotest--root; exit ;;
    help|-h|--help)
      source "$(autotest--root)/README.sh" "$@";
      exit $?
      ;;
    grep)
      case "$2" in
        test) egrep --color "^(TEST .+|FAIL .+|PASS|)" ;;
        todo) egrep --color "^(TEST|FAIL .+|SKIP .+)" ;;
        *) egrep --color "^(TEST|FAIL .+|CODE [^0])" ;;
      esac
      exit
      ;;
    checkup)
      # Be backwards compatible, this is from the old api
      # TODO this could be refactored, maybe using {brace,expansion}
      find "$(autotest--root)/old-api" -name "*.bash" -type f -exec bash -c '
        file={}
        tool=${file##*/}
        tool=${tool%%.bash}
        source "$file" || exit
        test "$(type -t ${tool}--test)" = "function" || {
          echo "\"$tool--test\" should be a function defined in $file"
          exit 1
        }
        $tool--test
      ' \;
      source <(autotest)
      tested "autotest can be sourced with process substitution"
      exit $?
      ;;
  esac
fi
  
function emsg () { echo "autotest:" "$@"; } >&2 # better than >&2 echo
if test "$DEBUG" = 'autotest' && test "$(type -t verb)" != 'function'
then
  declare -r DEBUG_ID="$*"
  function verb () { echo "@${FUNCNAME[1]} '$DEBUG_ID'" "$@"; } >&2
  verb "verbose debug mode active"
else
  function verb () { :; } # meant for debugging
fi

if test "$0" = "$BASH_SOURCE"
then
  #
  # assume autotest is being executed
  #

  source "$(autotest--root)/api/autocode.bash"
  # run autocode subcommand ASAP to speed it up a bit
  case "$1" in code) shift; autocode "$@"; exit; esac

  function fail () {
    # helper to fail fast
    code=$(autocode "${1:?'missing exit code'}") || exit
    emsg "$1: ${2:?'missing message'}"
    exit $code
  }

  source "$(autotest--root)/api/autotext.bash"
  # this subcommands can be run here to speed' em up a bit
  case "$*" in
    '') emsg "EUSAGE: specified empty string as argument 1"; exit 2 ;;
    -) autotext; exit ;;
    'report '*)
      test $# -ge 2 || fail EUSAGE "expecting at least 2 arguments"
      test -f "$2" || fail ENOENT "'$2' is not a file"
      test -x "$2" || fail EACCES "'$2' is not executable"
      ## generate report discarding all stderr
      "$0" "$2" "${@:3}" 2>/dev/null
      exit $? # preserve report exit status
      ;;
  esac

  # TEST RUNNER USAGE: <FILE> [ARG .. LIST] should be handled here
  source "$(autotest--root)/api/autoexec.bash"
  test -f "$1" && { autoexec "$@"; exit $?; }

  # when $1 is not a file neither a subcommand, fail with ENOENT
  emsg "ENOENT: '$1' is not a subcommand, neither a file"
  exit 127

else
  #
  # assume autotest is being sourced
  #
  test "$(type -t autocode)" != 'function' && {
    source "$(autotest--root)/api/autocode.bash"
    verb "loaded autocode and Error functions"
  }
  # for bare "source autotest", whole argv ($*) may match "source autotest"
  # or even empty string (seems to depend on calling environment)
  # but when more arguments are provided - ie. "source autotest argument list"
  # the argv contains only extra arguments - ie. "argument list"
  # ALSO NOTE: calling source within a function inherits argv
  verb "$0 sourced autotest with argv '$@'"
  { test "$*" = "source autotest" || test -z "$*"; } && {
    source "$(autotest--root)/api/autotest.bash" || return
    verb "loaded the autotest function"
    return 0
  }
 
  test $# -gt 0 && for name in "$@"
  do
    # $name usually refers a layer (aka. 0rigins)
    file="$(autotest--root)/0rigin/$name"
    # but may reference an api source file
    test -r "$file" \
      || file="$(autotest--root)/api/$name.bash"
    # after all, $name may not exist
    test -e "$file" || ENOENT "'$name' does not exist" || exit
    verb "will load file '$file'"
    source "$file" \
      || Error $? --trace "source $(printf %q "$2") raised $?" \
      || return
  done
  return 0 # source should return true, but may not
fi


##
# TRASHCAN HEREAFTER
##

    # here come edirection trick? => NO, WRITE TESTS FIRST FKIN COWBOY
    #autotest "$2"  2>/dev/null | autotest--protocol.v1 2>/dev/null
    #UNIT="" TEST=""
    #while read KEY VALUE
    #do # "semantic" validation
    #  if test "$KEY" == "TEST"; then TEST="$VALUE"; UNIT=""; fi
    #  UNIT="$(printf '%s%s\n' "$UNIT" "$KEY $VALUE")"
    #  test "$KEY" != "CODE" && echo "$KEY $VALUE" && continue
    #  # perform the validation
    #  if ! { diff -y -W 80 --left-column --color=auto \
    #       <(autotest $TEST 2>/dev/null) - <<<"$UNIT"
    #     } >&2
    #  then # unit is not semantically correct
    #    exit 99
    #  fi
    #done < <


##
# vim modeline (see vim +'help modeline')
# /* vim: set expandtab: */
# /* vim: set filetype=sh ts=2 shiftwidth=2: */

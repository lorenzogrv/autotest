#!/bin/bash

show-help () {
	cat <<HELP
Usage:

- 'autotest': prints all autotest code on stdout
- 'autotest checkup': runs the autotest test suite
- 'autotest allin DIRECTORY': runs each file found in DIRECTORY

Any other value at argument 1 outputs this help text.

Code examples:

- 'source <(autotest)': sources the autotest code for later usage
- 'autotest checkup && source <(autotest) || exit': common way to assert
  the toolset work as expected before sourcing it
- 'autotest allin test': runs all script tests found in 'test/'
HELP
}

# research this script directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# the autotest tools are the following

# autotest code is sent to stdout when this script receives 0 arguments
# TODO testodo <<<"tool to report tests pending to write"
(( $# )) || {
  find "$DIR" -name "*.bash" -type f -exec cat '{}' +
  exit # implicit exit with code > 0 when cat fails
}

case "$1" in
	checkup)
		find "$DIR" -name "*.bash" -type f -exec bash -c '
			file={}
			tool=$(basename "$file")
			tool=${tool%%.bash}
			source "$file" || exit
			test "$(type -t "$tool")" = "function" || {
				echo "\"$tool\" should be a function defined in $file"
				exit 1
			}
			$tool--test $tool
		' \;
		source <(autotest)
		tested "autotest can be sourced with process substitution"
		;;
	allin)
		tdir="${2:?provide a directory to search for test scripts}"
		echo "running each test script in $tdir"
		cd "$tdir" || exit 1
		find . -type f -exec bash -c '{
			file="{}"
			SECONDS=0
			"./$file" &>/dev/null
			printf "CODE %3i IN %2is BY %s\n" $? $SECONDS "$file"
		}' \; || { echo "no test scripts were found"; exit 1; }
		;;
	script)
		file="${2:?provide a script file to run}"
		echo "I should run $file"
		exit 1
		;;
	*)
		show-help
		exit 1
		;;
esac


# vim modeline
# /* vim: set filetype=sh ts=2 shiftwidth=2: */

#!/bin/bash

root="$(git rev-parse --show-toplevel)"
source "$root/api/check-command.bash" || exit
source "$root/api/check-command--returns.bash" || exit
source "$root/api/check-command--outputs.bash" || exit

function FAIL () { echo FAIL "$@"; echo CODE 1; exit 1; }

echo "TEST $0"

#
# OLD API!
#

# keep-in-mind: "bare" autotest is "output source code"
check-command autotest \; --returns zero --outputs something
check-command autotest checkup \; --returns zero --outputs something
check-command autotest help \; --returns zero --outputs something

#
# INTERNALS
#

# need autotest root to find examples later
check-command autotest root \; \
  --returns zero \
  --outputs string "$root"

# "unexistant" example MUST not exist
UNEXISTANT="$(autotest root)/example/unexistant"
if test -e "$UNEXISTANT"; then
  FAIL "$EXAMPLE should not exist, but it does"
fi

# "non-executable" must be a non-executable file
NONEXECUTABLE="$(autotest root)/example/non-executable"
if ! test -f "$NONEXECUTABLE"; then
  FAIL "$NONEXECUTABLE should be a file, but it isn't"
fi
if test -x "$NONEXECUTABLE"; then
  FAIL "$NONEXECUTABLE should not be executable, but it is"
fi

#
# NEW API
#

for f in {,report}
do
  check-command autotest $f "" \; --returns error --outputs error
  check-command autotest $f "$UNEXISTANT" \; --returns 127 --outputs error
  check-command autotest $f "$NONEXECUTABLE" \; --returns 126 --outputs error
done

# bare report is not valid, but bare autotest is valid
check-command autotest report \; --returns error --outputs error

echo "CODE 0"

##
# vim modeline
# Vim: set filetype=sh ts=2 shiftwidth=2 expandtab:

#!/bin/bash

function dry-assert-code () {
  test "$code" -eq $1 && {
    echo PASS "after $case, code is $1"
  } || {
    echo FAIL "after $case, code should be $1, but is $code"
    return 1
  }
}
function dry-diagnose () {
  test -v "${1:?missing output variable name}"
  while read l; do
    echo "   | ${1#std}: $l"
  done <<<"${!1}" >&2
  code=1
}
function dry-assert-output () {
  test -v "${1:?missing output variable name}"
  test -n "${!1}" && {
    echo PASS "after $case, $1 has data"
  } || {
    echo FAIL "after $case, $1 should have data"
    return 1
  }
}
function dry-refute-output () {
  test -v "${1:?missing output variable name}"
  test -z "${!1}" && {
    echo PASS "after $case, $1 has no data"
  } || {
    echo FAIL "after $case, $1 should have no data"
    dry-diagnose "$1"
    return 1
  }
}

case "$1" in
  '')
    # run all units
    root="$(git rev-parse --show-toplevel)"

    "$root/test/all-bash-source" "autotest"
    "$root/test/api-functions" "autotest" none "autotest"
    "$root/test/api-functions" "autotest" root "autotest--root"

    $0 load 'check-command'
    $0 load 'check-command--returns'
    ;;
  dry-*)
    echo "Bad usage: '$1' is not a valid test unit" >&2
    exit 2
    ;;
  *)
    # run specified unit
    source autotest || exit
    
    function load () {
      dry-assert-code 0
      dry-refute-output "stdout"
      dry-refute-output "stderr"
      (
        test "$(type -t "$1")" = 'function' && {
          echo FAIL "before $case, function '$1' is already defined"
          exit 1
        }
        autotest load "$1" &>/dev/null
        test "$(type -t "$1")" = 'function' && {
          echo PASS "after $case, function '$1' is defined"
        } || {
          echo FAIL "after $case, function '$1' should be defined"
        }
        exit 0 #to be explicit
      )
      return $?
    }

    unit="$1"
    test "$(type -t "$unit")" != 'function' && {
      echo "Bad usage: test '$unit' is not defined"
      exit 2
    } >&2

    shift
    echo TEST $unit "$@"

    stdout="$(autotest $unit "$@" 2>/dev/null)"
    stderr="$(autotest $unit "$@" 2>&1 >/dev/null)"
    code=$?

    case="calling 'autotest $unit $1'"
    $unit "$@"
    code=$?
    echo CODE $code
    exit $code
    ;;
esac

##
# vim modeline (see vim +'help modeline')
# /* vim: set expandtab: */
# /* vim: set filetype=sh ts=2 shiftwidth=2: */

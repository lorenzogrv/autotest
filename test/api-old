#!/bin/bash

function dry-fail () { echo FAIL "$@"; echo CODE 1; exit 1; }
function dry-verb () { while read line; do echo "$@" "$line"; done; }

function dry-assert-success () {
  test $code -eq 0 && {
    echo "PASS $case returns 0"
  } || {
    dry-fail "$case returns $code while expecting 0"
  }
}

function dry-refute-output () {
  local var="${1:?"$FUNCNAME missing output variable name"}"
  test -v "$var" || dry-fail "$FUNCNAME: variable $var is not declared"
  test -z "${!var}" && {
    echo "PASS $case writes nothing to $var"
  } || {
    dry-verb "$var:" <<<"${!var}" >&2
    dry-fail "$case writes something to $var while expecting nothing"
  }
}

function dry-assert-output () {
  local var="${1:?"$FUNCNAME missing output variable name"}"
  test -v "$var" || dry-fail "$FUNCNAME: variable $var is not declared"
  test -n "${!var}" && {
    echo "PASS $case writes something to $var"
  } || {
    dry-fail "$case writes nothing to $var (expecting something)"
  }
}

function dry-assert-function () {
  local fname="${1:?"$FUNCNAME: no function name specified"}"
  test "$(type -t "$fname")" = 'function' && {
    echo "PASS $case defines '$fname' function"
  } || {
    dry-fail "$case does NOT define '$fname' function"
  }
}

#YAGNI
#function dry-assert () {
#  # usage: [test expression]{1,n} [varname]
#  local exp var
#  exp=(); while (($# < 2)); do exp+=("$1"); shift; done
#  var="$1" # TODO assert variable has been set
#  "$exp" && echo "PASS $case"
#}

echo TEST $0

#### 
case="autotest 'bare' call (old api)"
####
stdout="$(autotest 2>/dev/null)"
stderr="$(autotest 2>&1 >/dev/null)"
code=$?
dry-assert-output "stdout"
dry-refute-output "stderr"
dry-assert-success
unset -v case stdout stderr code

####
case="eval old-api code"
####
output="$(eval "$(autotest)" 2>&1)"
code=$?
dry-refute-output "output"
dry-assert-success
unset -v case output code

eval "$(autotest)"
for fname in {tested,teskip}
do
  ####
  case="presence of old-api function $fname"
  ####
  dry-assert-function "$fname"
  dry-assert-function "$fname--test"
  unset -v case
  ####

  ####
  case="$fname's built-in test '$fname--test'"
  ####
  stdout="$("$fname--test" 2>/dev/null)"
  stderr="$("$fname--test" 2>&1 >/dev/null)"
  code=$?
  dry-refute-output "stderr"
  dry-assert-output "stdout"
  dry-assert-success
  unset -v case stdout stderr code
  ####
done

echo CODE 0

##
# vim modeline (see vim +'help modeline')
# /* vim: set expandtab: */
# /* vim: set filetype=sh ts=2 shiftwidth=2: */
